<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\BettingSettlementService;
use Carbon\Carbon;

class SettleBettingTickets extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'betting:settle
                            {date? : Ng√†y c·∫ßn quy·∫øt to√°n (YYYY-MM-DD), m·∫∑c ƒë·ªãnh l√† h√¥m qua}
                            {--region= : Mi·ªÅn c·ª• th·ªÉ (bac/trung/nam)}
                            {--ticket= : ID phi·∫øu c∆∞·ª£c c·ª• th·ªÉ}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Quy·∫øt to√°n phi·∫øu c∆∞·ª£c d·ª±a tr√™n k·∫øt qu·∫£ x·ªï s·ªë';

    protected BettingSettlementService $settlementService;

    /**
     * Create a new command instance.
     */
    public function __construct(BettingSettlementService $settlementService)
    {
        parent::__construct();
        $this->settlementService = $settlementService;
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('üé≤ B·∫Øt ƒë·∫ßu quy·∫øt to√°n phi·∫øu c∆∞·ª£c...');

        // X·ª≠ l√Ω quy·∫øt to√°n cho m·ªôt ticket c·ª• th·ªÉ
        if ($ticketId = $this->option('ticket')) {
            return $this->settleSingleTicket((int)$ticketId);
        }

        // X·ª≠ l√Ω quy·∫øt to√°n theo ng√†y
        $date = $this->argument('date')
            ? Carbon::parse($this->argument('date'))->format('Y-m-d')
            : Carbon::yesterday()->format('Y-m-d');

        $region = $this->option('region');

        $this->info("üìÖ Ng√†y quy·∫øt to√°n: {$date}");
        if ($region) {
            $this->info("üó∫Ô∏è Mi·ªÅn: " . strtoupper($region));
        }

        $this->newLine();

        // Ch·∫°y settlement
        $result = $this->settlementService->settleBatchByDate($date, $region);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        $this->displayResults($result);

        return $result['failed'] > 0 ? self::FAILURE : self::SUCCESS;
    }

    /**
     * Quy·∫øt to√°n cho m·ªôt phi·∫øu c∆∞·ª£c c·ª• th·ªÉ
     */
    protected function settleSingleTicket(int $ticketId): int
    {
        $this->info("üé´ Quy·∫øt to√°n phi·∫øu c∆∞·ª£c ID: {$ticketId}");

        $ticket = \App\Models\BettingTicket::find($ticketId);

        if (!$ticket) {
            $this->error("‚ùå Kh√¥ng t√¨m th·∫•y phi·∫øu c∆∞·ª£c ID: {$ticketId}");
            return self::FAILURE;
        }

        try {
            $result = $this->settlementService->settleTicket($ticket);

            if ($result['settled']) {
                $this->newLine();
                $this->info("‚úÖ Quy·∫øt to√°n th√†nh c√¥ng!");
                $this->table(
                    ['Th√¥ng tin', 'Gi√° tr·ªã'],
                    [
                        ['K·∫øt qu·∫£', strtoupper($result['result'])],
                        ['Ti·ªÅn c∆∞·ª£c', number_format($ticket->bet_amount, 0, ',', '.') . ' VNƒê'],
                        ['Ti·ªÅn th·∫Øng', number_format($result['win_amount'], 0, ',', '.') . ' VNƒê'],
                        ['Ti·ªÅn tr·∫£', number_format($result['payout_amount'], 0, ',', '.') . ' VNƒê'],
                    ]
                );

                // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng bet
                if (!empty($result['details'])) {
                    $this->newLine();
                    $this->info("üìã Chi ti·∫øt:");
                    foreach ($result['details'] as $index => $detail) {
                        $this->line("  " . ($index + 1) . ". Lo·∫°i: {$detail['type']}, S·ªë: " . implode(', ', $detail['numbers']) .
                                   " ‚Üí " . ($detail['is_win'] ? '‚úÖ TR√öNG' : '‚ùå TR∆Ø·ª¢T'));
                    }
                }

                return self::SUCCESS;
            } else {
                $this->warn("‚ö†Ô∏è Ch∆∞a th·ªÉ quy·∫øt to√°n: " . ($result['details']['error'] ?? 'Ch∆∞a c√≥ k·∫øt qu·∫£'));
                return self::FAILURE;
            }
        } catch (\Exception $e) {
            $this->error("‚ùå L·ªói: " . $e->getMessage());
            return self::FAILURE;
        }
    }

    /**
     * Hi·ªÉn th·ªã k·∫øt qu·∫£ quy·∫øt to√°n h√†ng lo·∫°t
     */
    protected function displayResults(array $result): void
    {
        $this->newLine();
        $this->info("üìä K·∫øt qu·∫£ quy·∫øt to√°n:");
        $this->table(
            ['Ch·ªâ s·ªë', 'S·ªë l∆∞·ª£ng'],
            [
                ['T·ªïng phi·∫øu c∆∞·ª£c', $result['total']],
                ['‚úÖ ƒê√£ quy·∫øt to√°n', $result['settled']],
                ['‚ùå Th·∫•t b·∫°i', $result['failed']],
            ]
        );

        if ($result['settled'] > 0) {
            $this->newLine();
            $this->info("‚úÖ Quy·∫øt to√°n th√†nh c√¥ng {$result['settled']} phi·∫øu c∆∞·ª£c!");
        }

        if ($result['failed'] > 0) {
            $this->newLine();
            $this->warn("‚ö†Ô∏è C√≥ {$result['failed']} phi·∫øu c∆∞·ª£c kh√¥ng th·ªÉ quy·∫øt to√°n.");

            // Hi·ªÉn th·ªã l·ªói chi ti·∫øt
            $errors = array_filter($result['results'], fn($r) => !$r['success']);
            if (count($errors) > 0 && $this->option('verbose')) {
                $this->newLine();
                $this->error("Chi ti·∫øt l·ªói:");
                foreach ($errors as $error) {
                    $this->line("  - Ticket #{$error['ticket_id']}: " . ($error['error'] ?? 'Unknown error'));
                }
            }
        }

        if ($result['total'] === 0) {
            $this->warn("‚ö†Ô∏è Kh√¥ng c√≥ phi·∫øu c∆∞·ª£c n√†o c·∫ßn quy·∫øt to√°n.");
        }
    }
}
